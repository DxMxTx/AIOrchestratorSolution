@page "/3"
@rendermode InteractiveServer
@inject Kernel Kernel // Inyecta el objeto Kernel de Semantic Kernel
@using Microsoft.SemanticKernel.ChatCompletion // Para tipos relacionados con el chat
@using System.Diagnostics 

<h1>¡Bienvenido a tu Orquestador de IA!</h1>
<p>Vamos a probar Semantic Kernel para generar texto.</p>
<p role="status">Current count: @currentCount</p>

<SfTextBox Placeholder="Escribe tu prompt aquí..."
           @bind-Value="@userPrompt"
           FloatLabelType="FloatLabelType.Auto"
           Multiline="true"
           CssClass="e-filled"
           Width="100%"></SfTextBox>

<SfButton Content="Generar Respuesta (con IA)"
          OnClick="GenerateResponse"
          CssClass="e-primary"
          IsPrimary="true"
          Style="margin-top: 15px;"></SfButton>

<SfButton Content="Click me"
          OnClick="IncrementCount"
          CssClass="e-primary"
          IsPrimary="true"
          Style="margin-top: 15px;"></SfButton>

@if (!string.IsNullOrEmpty(aiResponse))
{
    <h3>Respuesta de la IA:</h3>
    <div class="card" style="padding: 15px; border: 1px solid #ccc; border-radius: 5px; background-color: #f9f9f9;">
        <p>@((MarkupString)aiResponse)</p>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert" style="margin-top: 15px;">
        Error: @errorMessage
    </div>
}

@code {
    private string userPrompt = "";
    private string aiResponse = "";
    private string errorMessage = "";
    private IChatCompletionService _chatCompletionService;

    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }

    protected override void OnInitialized()
    {
        // Este método se llama cuando el componente se inicializa
        // Obtener el servicio de chat del Kernel inyectado
        _chatCompletionService = Kernel.GetRequiredService<IChatCompletionService>();
        System.Diagnostics.Debug.WriteLine("Home.razor: OnInitialized - _chatCompletionService inicializado."); // Log de depuración
    }

    private async Task GenerateResponse()
    {
        System.Diagnostics.Debug.WriteLine($"Home.razor: GenerateResponse llamado. userPrompt: '{userPrompt}'"); // Log de depuración

        aiResponse = ""; // Limpia la respuesta anterior
        errorMessage = ""; // Limpia cualquier error anterior

        if (string.IsNullOrWhiteSpace(userPrompt))
        {
            errorMessage = "Por favor, introduce un prompt.";
            System.Diagnostics.Debug.WriteLine("Home.razor: userPrompt está vacío."); // Log de depuración
            StateHasChanged(); // Fuerza la actualización de la UI para mostrar el error
            return;
        }

        try
        {
            System.Diagnostics.Debug.WriteLine("Home.razor: Intentando llamar al servicio de IA..."); // Log de depuración
            // Crear un historial de chat para darle contexto a la IA
            var chatHistory = new ChatHistory();
            chatHistory.AddSystemMessage("Eres un asistente útil que responde de manera concisa y clara. Siempre debes ser respetuoso."); // Instrucción inicial a la IA
            chatHistory.AddUserMessage(userPrompt); // El prompt que el usuario ha escrito

            // Realizar la llamada a la IA a través de Semantic Kernel
            var result = await _chatCompletionService.GetChatMessageContentAsync(chatHistory);
            aiResponse = result.Content; // Obtener la respuesta de la IA
            System.Diagnostics.Debug.WriteLine($"Home.razor: Respuesta de IA recibida. Longitud: {aiResponse?.Length ?? 0}"); // Log de depuración
        }
        catch (Exception ex)
        {
            errorMessage = $"Ocurrió un error al contactar a la IA: {ex.Message}";
            System.Diagnostics.Debug.WriteLine($"Home.razor: ERROR - {ex.Message}"); // Log de depuración
            // En una aplicación real, aquí también podrías loguear el error en un sistema de logs
        }
        finally
        {
             // Asegura que la UI se actualice después de intentar generar la respuesta o atrapar un error
             StateHasChanged();
        }
    }
} 