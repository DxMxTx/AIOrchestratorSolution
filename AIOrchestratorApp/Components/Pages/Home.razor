@page "/"
@rendermode InteractiveServer
@using Microsoft.SemanticKernel
@using System.Text.Json
@inject Kernel Kernel 

<PageTitle>Orquestador de UI</PageTitle>

<div style="max-width: 900px; margin: auto; font-family: sans-serif;">

    <h1>Orquestador de UI con IA</h1>
    <p>Introduce una idea (ej: "una calculadora" o "un reproductor de música simple") y observa cómo el agente la diseña y la codifica.</p>

    <div style="display: flex; gap: 8px; margin-top: 20px;">
        <input @bind="userInput" placeholder="Describe la UI que quieres construir..." @onkeyup="HandleKeyUp" disabled="@isLoading" style="flex-grow: 1; padding: 10px; border-radius: 8px; border: 1px solid #ccc;" />
        <button @onclick="InvokeOrchestrator" disabled="@isLoading" style="padding: 10px 20px; border: none; background-color: #007bff; color: white; border-radius: 8px; cursor: pointer;">
            @if (isLoading)
            {
                    <span>Orquestando...</span>
            }
            else
            {
                    <span>Generar</span>
            }
        </button>
    </div>

    @if (orchestrationLog.Any())
    {
            <div style="margin-top: 30px; border: 1px solid #eee; border-radius: 8px; padding: 20px;">
                <h3>Proceso de Orquestación:</h3>
                @foreach (var step in orchestrationLog)
                {
                        <div style="margin-top: 15px; padding: 10px; border-left: 4px solid @step.Color; background-color: #f8f9fa;">
                            <h4 style="margin-top:0;">@step.Title</h4>
                            <pre style="white-space: pre-wrap; font-family: monospace; background-color: #fff; padding: 10px; border-radius: 5px; border: 1px solid #ddd;"><code>@step.Content</code></pre>
                        </div>
                }
            </div>
    }
</div>

@code {
    private string userInput = string.Empty;
    private bool isLoading = false;
    private List<OrchestrationStep> orchestrationLog = new();

    // PASO 2: Eliminar la variable "kernel" y el método OnInitialized().
    // Ya no son necesarios porque el Kernel se inyecta.

    public record OrchestrationStep(string Title, string Content, string Color);

    private async Task HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !isLoading)
        {
            await InvokeOrchestrator();
        }
    }

    private async Task InvokeOrchestrator()
    {
        if (string.IsNullOrWhiteSpace(userInput) || isLoading)
        {
            return;
        }

        isLoading = true;
        orchestrationLog.Clear();
        var userIdea = userInput;
        userInput = string.Empty;

        try
        {
            // --- PASO 1: GENERAR EL CONCEPTO DE DISEÑO ---
            orchestrationLog.Add(new OrchestrationStep("Paso 1: Petición de Usuario", userIdea, "#007bff"));
            StateHasChanged();

            // PASO 3: Usar la propiedad "Kernel" inyectada (con K mayúscula)
            var designFunction = Kernel.Plugins["DesignPlugin"]["GenerateConcept"];
            var designResult = await Kernel.InvokeAsync(designFunction, new() { ["idea"] = userIdea });

            var designConcept = designResult.GetValue<string>() ?? "Error: No se pudo generar el concepto.";
            orchestrationLog.Add(new OrchestrationStep("Paso 2: Concepto de Diseño Generado", designConcept, "#e83e8c"));
            StateHasChanged();

            // --- PASO 2: GENERAR EL CÓDIGO ---
            var codeFunction = Kernel.Plugins["CodePlugin"]["GenerateCode"];
            var codeResult = await Kernel.InvokeAsync(codeFunction, new() { ["design_concept"] = designConcept });

            var generatedCode = codeResult.GetValue<string>() ?? "Error: No se pudo generar el código.";
            orchestrationLog.Add(new OrchestrationStep("Paso 3: Código Blazor Resultante", generatedCode, "#28a745"));
        }
        catch (Exception ex)
        {
            orchestrationLog.Add(new OrchestrationStep("Error en la Orquestación", ex.Message, "#dc3545"));
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
