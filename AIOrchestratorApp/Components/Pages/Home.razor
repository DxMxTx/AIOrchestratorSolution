@page "/"
@rendermode InteractiveServer
@using Microsoft.SemanticKernel
@using System.Text.RegularExpressions
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@inject Kernel Kernel
@inject IJSRuntime JSRuntime

<PageTitle>Prototype IA v5</PageTitle>

<div style="display: grid; grid-template-columns: 1fr 1fr; gap: 40px; max-width: 95%; margin: auto; font-family: sans-serif;">

    <div class="control-panel">
        <h1>Prototype IA con Diseño Visual</h1>
        <p>Describe una idea y un estilo visual. La IA creará un concepto, le aplicará un diseño y generará el código.</p>

        <div class="input-group" style="display: flex; flex-direction: column; gap: 15px; margin-top: 20px;">
            <SfTextBox @bind-Value="userInput" Placeholder="Describe la UI que quieres construir..." FloatLabelType="FloatLabelType.Auto" Enabled="!isLoading"></SfTextBox>
            <SfTextBox @bind-Value="styleRequest" Placeholder="Describe el estilo visual (ej: 'oscuro y moderno')" FloatLabelType="FloatLabelType.Auto" Enabled="!isLoading"></SfTextBox>
            <SfButton @onclick="InvokeInitialGeneration" IsPrimary="true" Disabled="@isLoading">
                @if (isLoading && activeProcess == "generation")
                {
                    <span>Orquestando...</span>
                }
                else
                {
                    <span>Generar</span>
                }
            </SfButton>
        </div>

        @if (!string.IsNullOrWhiteSpace(generatedCode))
        {
            <div class="refinement-section" style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee;">
                <h3>Refinar el Resultado</h3>
                <p>¿No es perfecto? Pide un cambio:</p>
                <div style="display: flex; flex-direction: column; gap: 15px; margin-top: 10px;">
                    <SfTextBox @bind-Value="modificationRequest" Placeholder="Ej: 'añade un botón de cancelar' o 'cambia el color del título a rojo'" FloatLabelType="FloatLabelType.Auto" Enabled="!isLoading"></SfTextBox>
                    <SfButton @onclick="InvokeRefinement" Disabled="@isLoading" CssClass="e-warning">
                        @if (isLoading && activeProcess == "refinement")
                        {
                            <span>Refinando...</span>
                        }
                        else
                        {
                            <span>Refinar</span>
                        }
                    </SfButton>
                </div>
            </div>
        }

        @if (orchestrationLog.Any())
        {
            <div style="margin-top: 30px; border: 1px solid #eee; border-radius: 8px; padding: 20px;">
                <h3>Proceso de Orquestación:</h3>
                @foreach (var step in orchestrationLog)
                {
                    <div style="margin-top: 15px; padding: 10px; border-left: 4px solid @step.Color; background-color: #f8f9fa;">
                        <h4 style="margin-top:0;">@step.Title</h4>
                        <pre style="white-space: pre-wrap; font-family: monospace; background-color: #fff; padding: 10px; border-radius: 5px; border: 1px solid #ddd;"><code>@step.Content</code></pre>
                    </div>
                }

                @if (!string.IsNullOrWhiteSpace(generatedCode))
                {
                    <div class="code-actions" style="margin-top: 20px; display: flex; gap: 10px;">
                        <SfButton CssClass="e-info" @onclick="CopyCodeToClipboard">Copiar Código</SfButton>
                        <SfButton CssClass="e-success" @onclick="DownloadCodeAsFile">Descargar Fichero</SfButton>
                    </div>
                }
            </div>
        }
    </div>

    <div class="preview-panel">
        <h2 style="position: sticky; top: 0; background: white; padding-bottom: 10px;">Vista Previa en Vivo (Simulación Escritorio)</h2>
        <div class="iframe-desktop-wrapper" style="width: 100%; overflow-x: auto; border: 1px solid #ccc; border-radius: 8px; background-color: #f8f9fa; padding: 20px;">
            <iframe style="width: 1200px; height: 810px; border: none; display: block; margin: 0 auto; background-color: white; box-shadow: 0 0 15px rgba(0,0,0,0.1);"
                    sandbox="allow-scripts allow-same-origin"
                    srcdoc="@htmlToRender">
            </iframe>
        </div>
    </div>
</div>

@code {
    private string userInput = string.Empty;
    private string styleRequest = "moderno y profesional"; // Valor por defecto
    private string modificationRequest = string.Empty;
    private string generatedCode = string.Empty;
    private string htmlToRender = "<div style='display:flex;justify-content:center;align-items:center;height:100%;color:#888;'><p>Aquí aparecerá tu componente...</p></div>";
    private string activeProcess = string.Empty;
    private bool isLoading = false;
    private List<OrchestrationStep> orchestrationLog = new();

    public record OrchestrationStep(string Title, string Content, string Color);

    private void UpdateRenderableCode(string fullCode)
    {
        generatedCode = fullCode;
        htmlToRender = fullCode;
    }

    private string ExtractJsonFromString(string text)
    {
        if (string.IsNullOrWhiteSpace(text)) return string.Empty;
        var match = Regex.Match(text, @"\{.*\}", RegexOptions.Singleline);
        if (match.Success)
        {
            return match.Value;
        }
        match = Regex.Match(text, @"\[.*\]", RegexOptions.Singleline);
        if (match.Success)
        {
            return match.Value;
        }
        return text;
    }

    private async Task CopyCodeToClipboard()
    {
        if (!string.IsNullOrWhiteSpace(generatedCode))
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", generatedCode);
        }
    }

    private string GetFileExtensionFromCode(string code)
    {
        var match = Regex.Match(code, @"<!--\s*Language:\s*(\w+)\s*-->");
        return match.Success ? match.Groups[1].Value.ToLower() : "html";
    }

    private async Task DownloadCodeAsFile()
    {
        if (!string.IsNullOrWhiteSpace(generatedCode))
        {
            var extension = GetFileExtensionFromCode(generatedCode);
            var fileName = $"component.{extension}";
            var fileStream = new System.IO.MemoryStream(System.Text.Encoding.UTF8.GetBytes(generatedCode));
            using var streamRef = new DotNetStreamReference(stream: fileStream);
            await JSRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        }
    }

    private async Task InvokeInitialGeneration()
    {
        if (string.IsNullOrWhiteSpace(userInput) || isLoading) return;
        isLoading = true;
        activeProcess = "generation";
        orchestrationLog.Clear();
        generatedCode = string.Empty;
        var userIdea = userInput;
        var userStyle = styleRequest;
        try
        {
            orchestrationLog.Add(new OrchestrationStep("Paso 1: Petición de Usuario", $"Idea: {userIdea}\nEstilo: {userStyle}", "#007bff"));
            await InvokeAsync(StateHasChanged);
            var designResult = await Kernel.InvokeAsync(Kernel.Plugins["DesignPlugin"]["GenerateConcept"], new() { ["idea"] = userIdea });
            var designConceptJson = designResult.GetValue<string>()!;
            orchestrationLog.Add(new OrchestrationStep("Paso 2: Plan Estructural (JSON)", designConceptJson, "#6f42c1"));
            await InvokeAsync(StateHasChanged);
            await Task.Delay(1500); // Evitar error 429
            var styleArguments = new KernelArguments { ["design_plan_json"] = designConceptJson, ["style_request"] = userStyle };
            var styleResult = await Kernel.InvokeAsync(Kernel.Plugins["StylingPlugin"]["ApplyVisualTheme"], styleArguments);
            var rawStyleOutput = styleResult.GetValue<string>()!;
            var enrichedPlanJson = ExtractJsonFromString(rawStyleOutput);
            if (string.IsNullOrWhiteSpace(enrichedPlanJson))
            {
                throw new InvalidOperationException("El Diseñador Visual (StylingPlugin) no generó un plan de estilo en formato JSON válido.");
            }
            var formattedJson = System.Text.Json.JsonDocument.Parse(enrichedPlanJson).RootElement.ToString();
            orchestrationLog.Add(new OrchestrationStep("Paso 3: Plan Enriquecido con Estilo (JSON)", formattedJson, "#e83e8c"));
            await InvokeAsync(StateHasChanged);
            await Task.Delay(1500); // Evitar error 429
            var codeFunction = Kernel.Plugins["CodePlugin"]["GenerateCode"];
            var codeResult = await Kernel.InvokeAsync(codeFunction, new() { ["design_concept"] = enrichedPlanJson });
            var newCode = codeResult.GetValue<string>()!;
            orchestrationLog.Add(new OrchestrationStep("Paso 4: Código Final Generado", newCode, "#28a745"));
            UpdateRenderableCode(newCode);
        }
        catch (Exception ex)
        {
            orchestrationLog.Add(new OrchestrationStep("Error en la Orquestación", ex.Message, "#dc3545"));
        }
        finally
        {
            isLoading = false;
            activeProcess = string.Empty;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task InvokeRefinement()
    {
        if (string.IsNullOrWhiteSpace(modificationRequest) || string.IsNullOrWhiteSpace(generatedCode) || isLoading) return;
        isLoading = true;
        activeProcess = "refinement";
        try
        {
            var request = modificationRequest;
            modificationRequest = string.Empty;
            orchestrationLog.Add(new OrchestrationStep("Paso 4: Petición de Refinamiento", request, "#fd7e14"));
            await InvokeAsync(StateHasChanged);
            var refinementFunction = Kernel.Plugins["RefinementPlugin"]["ModifyCode"];
            var arguments = new KernelArguments
                {
                    ["existing_code"] = generatedCode,
                    ["modification_request"] = request
                };
            var refinementResult = await Kernel.InvokeAsync(refinementFunction, arguments);
            var refinedCode = refinementResult.GetValue<string>() ?? "Error";
            orchestrationLog.RemoveAll(step => step.Title.Contains("Refinado") || step.Title.Contains("Código Final Generado"));
            orchestrationLog.Add(new OrchestrationStep("Paso 5: Código Refinado", refinedCode, "#17a2b8"));
            UpdateRenderableCode(refinedCode);
        }
        catch (Exception ex)
        {
            orchestrationLog.Add(new OrchestrationStep("Error en el Refinamiento", ex.Message, "#dc3545"));
        }
        finally
        {
            isLoading = false;
            activeProcess = string.Empty;
            await InvokeAsync(StateHasChanged);
        }
    }
}
